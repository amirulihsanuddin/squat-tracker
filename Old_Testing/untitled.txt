from sklearn.pipeline import make_pipeline
from sklearn.preprocessing import StandardScaler

from sklearn.svm import SVC
from sklearn.linear_model import LogisticRegression, RidgeClassifier
from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier

pipelines = {
    'lr':make_pipeline(StandardScaler(), LogisticRegression()),
    'rc':make_pipeline(StandardScaler(), RidgeClassifier()),
    'rf':make_pipeline(StandardScaler(), RandomForestClassifier()),
    'gb':make_pipeline(StandardScaler(), GradientBoostingClassifier()),
    'svm': make_pipeline(StandardScaler(), SVC(kernel='linear', C=1.0))
}

fit_models = {}
for algo, pipeline in pipelines.items():
    model = pipeline.fit(x_train, y_train)
    fit_models[algo] = model
    
    
# Specify the number of folds (e.g., 5-fold cross-validation)
num_folds = 10
kf = KFold(n_splits=num_folds, shuffle=True, random_state=42)

# Loop through each model in the pipelines and perform cross-validation
for algo, pipeline in pipelines.items():
    scores = cross_val_score(pipeline, x_train, y_train, cv=kf, scoring='accuracy')
    print(f'{algo} Cross-Validation Scores: {scores}')
    print(f'{algo} Mean Accuracy: {scores.mean()}')
    print()
    
fit_models

fit_models['rc'].predict(x_test)

from sklearn.metrics import accuracy_score, precision_score, recall_score
import pickle

for algo, model in fit_models.items():
    yhat = model.predict(x_test)
    print(algo, accuracy_score(y_test.values, yhat), 
        precision_score(y_test.values, yhat, average = "binary", pos_label="down"),
        recall_score(y_test.values, yhat, average="binary", pos_label="down"))
        
yhat = fit_models['rf'].predict(x_test)

with open('squat.pkl', 'wb') as f:
    pickle.dump(fit_models['rf'], f)